#version 460 core

layout (location = 0) out vec4 frag_color;
layout (location = 1) out vec4 bright_color;

struct Material 
{
	sampler2D texture_diffuse1;
	sampler2D texture_specular1;
	sampler2D texture_normal1;
	sampler2D texture_emission1;
	float shininess;
	float alpha;
};

struct dirLight
{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct pointLight 
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float constant;
	float linear;
	float quadratic;
};

#define NR_POINT_LIGHTS 3

in vec3 frag_pos;
in vec2 tex_coords;
in mat3 tbn;

uniform Material material;
uniform dirLight dir_light;
uniform pointLight point_lights[NR_POINT_LIGHTS];
uniform vec3 view_pos;
uniform bool emissive = false;

vec3 calcPointLight(pointLight light, vec3 normal, vec3 frag_pos, vec3 view_dir);
vec3 calcDirLight(dirLight light, vec3 normal, vec3 view_dir);

void main() 
{
	//Properties
	vec3 norm = texture(material.texture_normal1, tex_coords).rgb;
	norm = norm * 2.0 - 1.0;
	norm = normalize(tbn * norm);

	vec3 view_dir = normalize(view_pos - frag_pos);

	//Direction Lights
	vec3 result = calcDirLight(dir_light, norm, view_dir);

	//Point Lights
	for (int i = 0; i < NR_POINT_LIGHTS; i++)
	{
		result += calcPointLight(point_lights[i], norm, frag_pos, view_dir);
	}

	//Emission
	const float emission_amount = 4;

	if (emissive)
	{
		vec3 emission = texture(material.texture_emission1, tex_coords).rgb;
		result += emission * emission_amount;
	}

	//Calculate Bloom Threshold
	float brightness = dot(result, vec3(0.2126, 0.7152, 0.0722));
	if (brightness > 1.0)
	{
		bright_color = vec4(result, 1.0);
	}
	else
	{
		bright_color = vec4(0.0, 0.0, 0.0, 1.0);
	}
	
	frag_color = vec4(result, material.alpha);
}

vec3 calcPointLight(pointLight light, vec3 normal, vec3 frag_pos, vec3 view_dir)
{
	vec3 light_dir = normalize(light.position - frag_pos);
	//Diffuse
	float diff = max(dot(normal, light_dir), 0.0);
	//Specular
	vec3 reflect_dir = reflect(-light_dir, normal);
	float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);
	//Attenuation
	float distance = length(light.position - frag_pos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
	//Combine
	vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, tex_coords));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, tex_coords));
	vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, tex_coords));
	ambient *= attenuation; 
	diffuse *= attenuation;
	specular *= attenuation;
	return (ambient + diffuse + specular);
}

vec3 calcDirLight(dirLight light, vec3 normal, vec3 view_dir)
{
	vec3 light_dir = normalize(-light.direction);
	//Diffuse
	float diff = max(dot(normal, light_dir), 0.0);
	//Specular
	vec3 reflect_dir = reflect(-light_dir, normal);
	float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);
	//Combine
	vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, tex_coords));
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, tex_coords));
	vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, tex_coords));
	return (ambient + diffuse + specular);
}